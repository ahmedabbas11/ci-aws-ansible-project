version: 2.1

jobs:
  configure_infrastructure: 
    docker:
      - image: python:3.8-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["cf:8b:46:ed:e3:f9:13:20:4d:8e:e4:58:e0:08:9b:ea"] 
      - run:
          name: Install Ansible
          command: |
            apk add --no-cache --virtual build-dependencies python3-dev libffi-dev openssl-dev build-base
            pip3 install --upgrade pip
            pip3 install ansible
            apk add openssh-client
      - run:
          name: Run Playbook and Configure server
          command: |
            ansible-playbook -i inventory main-remote.yml

  smoke_test:
    docker:
      - image: alpine:latest
    steps:
      - run: apk add --update curl
      - run:
          name: smoke test
          command: |
            URL="http://3.89.87.63:3000/"
            # Test if website exists
            if curl -s --head ${URL} 
            then
              return 0
            else
              return 1
            fi
  create_and_deploy_front_end: 
      docker:
        - image: amazon/aws-cli
      steps:
        - checkout
        - run:
            name: Execute bucket.yml - Create Cloudformation Stack
            command: |
              aws cloudformation deploy \
              --template-file ./cf/bucket.yml \
              --stack-name stack-create-bucket-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides MyBucketName="udapeople-ci-${CIRCLE_WORKFLOW_ID:0:7}"

        - run: aws s3 sync ./resources/ s3://udapeople-ci-${CIRCLE_WORKFLOW_ID:0:7} --delete

  get_last_deployment_id:
      docker:
        - image: amazon/aws-cli
      steps:
        - checkout
        - run: yum install -y tar gzip
        - run:
            name: Fetch and save the old pipeline ID (bucket name) responsible for the last release.
            command: |
              aws cloudformation \
              list-exports --query "Exports[?Name==\`PipelineID\`].Value" \
              --no-paginate --output text > ~/textfile.txt
        - persist_to_workspace:
            root: ~/
            paths: 
              - textfile.txt 

  promote_to_production:
      docker:
        - image: amazon/aws-cli
      steps:
        - checkout
        - run:
            name: Execute cloudfront.yml
            command: |
              aws cloudformation deploy \
              --template-file cloudfront.yml \
              --stack-name production-distro \
              --parameter-overrides PipelineID="udapeople-ci-${CIRCLE_WORKFLOW_ID:0:7}"
  clean_up_old_front_end:
      docker:
        - image: amazon/aws-cli
      steps:
        - checkout
        - run: yum install -y tar gzip
        - attach_workspace:
            at: ~/
        - run:
            name: Destroy the previous S3 bucket and CloudFormation stack. 
            # Use $OldBucketID environment variable or mybucket644752792305 below.
            # Similarly, you can create and use $OldStackID environment variable in place of production-distro 
            command: |
              export OldBucketID=$(cat ~/textfile.txt)
              aws s3 rm "s3://${OldBucketID}" --recursive
workflows:
  myWorkflow:
    jobs:
      # - configure_infrastructure
      # - smoke_test:
      #     requires:
      #       - configure_infrastructure
        - create_and_deploy_front_end
        - promote_to_production:
            requires: 
              - create_and_deploy_front_end
              - get_last_deployment_id
        - get_last_deployment_id
        - clean_up_old_front_end:
            requires:
              - get_last_deployment_id
              - promote_to_production